// Code generated by MockGen. DO NOT EDIT.
// Source: app_service_auth.go

// Package app_services is a generated GoMock package.
package app_services

import (
	app_services "GophKeeper/internal/server/app_services"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthApp is a mock of AuthApp interface.
type MockAuthApp struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAppMockRecorder
}

// MockAuthAppMockRecorder is the mock recorder for MockAuthApp.
type MockAuthAppMockRecorder struct {
	mock *MockAuthApp
}

// NewMockAuthApp creates a new mock instance.
func NewMockAuthApp(ctrl *gomock.Controller) *MockAuthApp {
	mock := &MockAuthApp{ctrl: ctrl}
	mock.recorder = &MockAuthAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApp) EXPECT() *MockAuthAppMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthApp) ChangePassword(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthAppMockRecorder) ChangePassword(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthApp)(nil).ChangePassword), email, password)
}

// Login mocks base method.
func (m *MockAuthApp) Login(in app_services.Credential) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthAppMockRecorder) Login(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthApp)(nil).Login), in)
}

// Register mocks base method.
func (m *MockAuthApp) Register(in app_services.Credential) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthAppMockRecorder) Register(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthApp)(nil).Register), in)
}
